uniform vec3 viewPos;
uniform float shininess;
uniform float specularIntensity;

struct BaseLight{
    vec3 color;
    float intensity;
};

struct DirectionalLight{
    BaseLight base;
    vec3 direction;
};


struct Attenuation{
    float constant;
    float linear;
    float quadratic;
};

struct PointLight{
    BaseLight base;
    Attenuation attenuation;
    vec3 position;
    float range;
};

struct SpotLight{
    PointLight base;
    float cutOff;
    vec3 direction;
};

vec3 CalcLight(BaseLight light, vec3 normal, vec3 lightDir, vec3 viewDir){
    float diff = max(dot(normal, lightDir), 0.0);

    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess);

    vec3 diffuse = light.color * diff * light.intensity;
    vec3 specular = light.color * spec * specularIntensity;

    return diffuse + specular;
}

vec3 CalcDirLight(DirectionalLight light, vec3 normal, vec3 viewDir){
    return CalcLight(light.base, normal, -light.direction, viewDir);
}


vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos){
    float distance    = length(light.position - fragPos);
    if(distance > light.range) return vec3(0.0);

    vec3 lightDir = normalize(light.position - fragPos);

    float attenuation = 1.0 / (light.attenuation.constant + light.attenuation.linear * distance + light.attenuation.quadratic * (distance * distance));

    return attenuation * CalcLight(light.base, normal, lightDir, viewDir);
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir, vec3 fragPos){
    vec3 lightDir = normalize(light.base.position - fragPos);

    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.cutOff;
    float intensity = clamp((theta - light.cutOff) / epsilon,0.0, 1.0);

    return intensity * CalcPointLight(light.base, normal, viewDir, fragPos);
}
